Instructions for Building a Local Gemini 2.0 Flash Chatbot
Project Setup
Create a new directory for your chatbot project
Initialize a new Node.js project with npm init -y
Install required dependencies:
npm install express dotenv cors axios
API Configuration
Create a .env file in the root directory
Add your Gemini 2.0 Flash API key:
GEMINI_API_KEY=your_api_key_here
Create a config.js file to safely load the API key:
javascript

require('dotenv').config();

module.exports = {
  geminiApiKey: process.env.GEMINI_API_KEY
};
Backend Implementation
Create a file named server.js with the following code:
javascript

const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { geminiApiKey } = require('./config');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

app.post('/chat', async (req, res) => {
  try {
    const { message } = req.body;
    
    const response = await axios.post(
      'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent',
      {
        contents: [{ parts: [{ text: message }] }]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': geminiApiKey
        }
      }
    );
    
    const reply = response.data.candidates[0].content.parts[0].text;
    res.json({ reply });
  } catch (error) {
    console.error('Error calling Gemini API:', error.response?.data || error.message);
    res.status(500).json({ error: 'Failed to get response from AI' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
Frontend Implementation
Create a public directory
Create an index.html file in the public directory:
html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gemini 2.0 Flash Chatbot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    #chat-container {
      height: 400px;
      border: 1px solid #ccc;
      overflow-y: auto;
      padding: 10px;
      margin-bottom: 10px;
    }
    .message {
      margin-bottom: 10px;
      padding: 8px 12px;
      border-radius: 5px;
    }
    .user-message {
      background-color: #e3f2fd;
      text-align: right;
    }
    .bot-message {
      background-color: #f1f1f1;
    }
    #message-form {
      display: flex;
    }
    #message-input {
      flex-grow: 1;
      padding: 8px;
    }
    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Gemini 2.0 Flash Chatbot</h1>
  <div id="chat-container"></div>
  <form id="message-form">
    <input type="text" id="message-input" placeholder="Type your message..." required>
    <button type="submit">Send</button>
  </form>

  <script>
    const chatContainer = document.getElementById('chat-container');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    
    messageForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (!message) return;
      
      // Add user message to chat
      addMessage(message, 'user');
      messageInput.value = '';
      
      try {
        // Show loading indicator
        const loadingId = addMessage('Thinking...', 'bot');
        
        // Send message to backend
        const response = await fetch('/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ message })
        });
        
        if (!response.ok) {
          throw new Error('Failed to get response');
        }
        
        const data = await response.json();
        
        // Remove loading message
        removeMessage(loadingId);
        
        // Add bot response to chat
        addMessage(data.reply, 'bot');
      } catch (error) {
        console.error('Error:', error);
        addMessage('Sorry, I encountered an error. Please try again.', 'bot');
      }
    });
    
    function addMessage(text, sender) {
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.classList.add(sender === 'user' ? 'user-message' : 'bot-message');
      messageElement.textContent = text;
      
      const id = Date.now().toString();
      messageElement.id = id;
      
      chatContainer.appendChild(messageElement);
      chatContainer.scrollTop = chatContainer.scrollHeight;
      
      return id;
    }
    
    function removeMessage(id) {
      const element = document.getElementById(id);
      if (element) element.remove();
    }
  </script>
</body>
</html>
Running the Application
Start the server with:
node server.js
Open your browser and navigate to http://localhost:3000
Additional Enhancements (Optional)
Add conversation history by storing previous messages
Implement error handling and retry logic
Add typing indicators and animations
Create a more sophisticated UI with user avatars
Add support for system prompts to control the chatbot's behavior
This implementation creates a simple but functional chatbot that connects to the Gemini 2.0 Flash API. The frontend allows users to send messages and displays responses from the AI.